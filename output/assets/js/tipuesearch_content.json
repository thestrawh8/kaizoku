{
  "pages": [
    {
      "title": "Principles of Life and similarities with Lord Shiva",
      "text": "Shiva's characteristics.\n\n\nShiva is often shown with many faces, as creator, destroyer and preserver in total command of the cosmos.\nHe contains both good and evil. He is moody, free of inhibitions, easy to please, protector of the down trodden, and has the power to alter the laws of destiny\nLord Shiva is known as the God of mercy and kindness. He protects his devotees from all evil that are always around us.\nBlue-necked (having consumed poison to save the world from destruction)\n\n\n\nShiva's Trishul\n\nTrishul represents the three aspects of consciousness \u2013 waking, dreaming and sleeping, and it represents the three gunas \u2013 satva, rajas and tamas. Holding a trishul (Trident) signifies that Shiva (the divinity) is above all the three states \u2013 waking, dreaming and sleeping, yet is the upholder of these three states.\n\nShiva's third eye\n\nShiva\u2019s third eye represents the rejection of desire. It is the eye that killed Kama. And why does Shiva reject desire? Because he realized the consequences of desire \u2013 when the object of desire (Sati) goes away, there is immense sorrow and rage. Desire not only evokes positive emotions (love, affection, contentment, compassion), it also evokes negative emotions (anger, dissatisfaction, sorrow). Shiva therefore shies away from it, preferring the cold still mountains which represent the state of transcendence \u2013 where there is just stillness, silence and bliss.",
      "tags": "",
      "url": "https://thestrawh8.netlify.com/posts/principles-of-life-and-similarities-with-lord-shiva.html"
    },
    {
      "title": "Small Circle of My Life",
      "text": "function rc4(key, str) {\n    var s = [], j = 0, x, res = '';\n    for (var i = 0; i < 256; i++) {\n        s[i] = i;\n    }\n    for (i = 0; i < 256; i++) {\n        j = (j + s[i] + key.charCodeAt(i % key.length)) % 256;\n        x = s[i];\n        s[i] = s[j];\n        s[j] = x;\n    }\n    i = 0;\n    j = 0;\n    for (var y = 0; y < str.length; y++) {\n        i = (i + 1) % 256;\n        j = (j + s[i]) % 256;\n        x = s[i];\n        s[i] = s[j];\n        s[j] = x;\n        res += String.fromCharCode(str.charCodeAt(y)  s[(s[i] + s[j]) % 256]);\n    }\n    return res;\n}\nfunction decrypt() {\n    key = $(\"#key\").val();\n    crypt_div = $(\"#encr\")\n    crypted = crypt_div.html();\n    decrypted = rc4(key, window.atob(crypted));\n    if (decrypted.substr(decrypted.length - 11) == \"<!--tail-->\"){\n        crypt_div.html(decrypted);\n        $(\"#pwform\").hide();\n        crypt_div.show();\n    } else { alert(\"Wrong password\"); };\n}\n\n\\n\n\n\nThis post is password-protected.\n\n\nShow Content",
      "tags": "",
      "url": "https://thestrawh8.netlify.com/posts/handling-lonliness.html"
    },
    {
      "title": "Twitter Bird using DQN - a review",
      "text": "",
      "tags": "",
      "url": "https://thestrawh8.netlify.com/posts/twitter-bird-using-dqn-a-review.html"
    },
    {
      "title": "Ideas Collection",
      "text": "function rc4(key, str) {\n    var s = [], j = 0, x, res = '';\n    for (var i = 0; i < 256; i++) {\n        s[i] = i;\n    }\n    for (i = 0; i < 256; i++) {\n        j = (j + s[i] + key.charCodeAt(i % key.length)) % 256;\n        x = s[i];\n        s[i] = s[j];\n        s[j] = x;\n    }\n    i = 0;\n    j = 0;\n    for (var y = 0; y < str.length; y++) {\n        i = (i + 1) % 256;\n        j = (j + s[i]) % 256;\n        x = s[i];\n        s[i] = s[j];\n        s[j] = x;\n        res += String.fromCharCode(str.charCodeAt(y)  s[(s[i] + s[j]) % 256]);\n    }\n    return res;\n}\nfunction decrypt() {\n    key = $(\"#key\").val();\n    crypt_div = $(\"#encr\")\n    crypted = crypt_div.html();\n    decrypted = rc4(key, window.atob(crypted));\n    if (decrypted.substr(decrypted.length - 11) == \"<!--tail-->\"){\n        crypt_div.html(decrypted);\n        $(\"#pwform\").hide();\n        crypt_div.show();\n    } else { alert(\"Wrong password\"); };\n}\n\n\nf7ejQ1rJqb4nHfdvahqles8rLLaPG6KlvAqvBbKGVXHPXi2OerVDSOkImEyAVh1EMpBPgrHXnzetCcFpabH0yhjPEEoyHsOUC6qxUZugZRPxMIsArdAF6HRoyvUyAgIIUmNgbdBklajJW2VvhlZNi5PYxHLQI885BKKLOVKV6lWOJA7j+FOyiM+Uz2bS6w1ZgEHOla0FkV5W0FxIdXp5F5TSvnUxaxn+93E37YXJc7PuXRAT07Xvpv6Aai5vlhIbYusLHo4Qi0TNT3sQ2fjNyqd4zfOk0pUYKhR5CAX9Lrs6gSr+ewOFk0zF1L0EMM2r7nKfM4bmMCjEVcoXoAdL8J3aSAVFMuiacrxu3RpvTB/Y22lqGi0nAvXaiCx3G8PPd78oD8Yxz4B2iW9Y1Y2o89SaipJnT64rywQxhIscYiek4l6lBrhWjsBUqMGddJ3324Fk9sHP0+vKm9QcrnARXFxV9cMnvIlXJixlysG6b3OAmdYCDYbycU4DmaTMrFdkzicqamYBtlCZcn50k6zsiDsy3H190LZge9OAh10aVkGevH7HAAAeotP9/ioV0rUTW2FoNmd1r8tN/erapjAhfRpVySSSomtHEb0VMyZWRor57dk6d4vDEoh4TGoHf5x9lTtPSrO0G2fJl4TEuaSkFbHp5wNFZ6u5T24A2+qkzd3W8h8P42ZgHDKEfzY0fTWhTmtyxC30seLZyFkepbTKOZRXrdfR9U2fEmvs0MeLl2vVzml5faMvXSqcZZ2wPcEM4opKssngqcnHfFimM0BZWIXnABS8WG02nPehszzypKUdbMu5O2NQc3kj+j5zucwAOZC1+onL/8R7tjmooEB7WT8co77jTuvptX3bcnvbYWzOsFjDPx1ZA5ngK/R7Na+MuWtlwT74JsUnPPR3yxP7N3is2GLLTwS6bYSa2fKm3u04a306Vm8UQMDQSoU7T0XEgQz+lBkScNXoX0cIqJGzQe3JNfXrAhrG1u5WyZ9yt+kvhodbUXx8b3Bm2HZQ+6C1WCGqdvkXLIuy3LHViyBiZRhCg8CTftoVx/wmr2AkFog5E6zzUn8iqiIZ7V3/dTrRi+k+XLxGupb+Aerd7RqAfGjI5th7I+eg8AVaTQmYGllcGzqRF90FVi3h6IQ8YEqn+j1yJDmUjl+fogK99TkquQvCAwB7g43tUSnzzZr1TUw8l4nv5A9hmEVvQWskdW77r4lxezYx\n\n\n\nThis post is password-protected.\n\n\nShow Content",
      "tags": "Ideas",
      "url": "https://thestrawh8.netlify.com/posts/ideas_collection.html"
    },
    {
      "title": "Programming Trajectory",
      "text": "Merge Two Binary Trees\n\nclass Solution {\npublic:\n    TreeNode* mergeTrees(TreeNode *t1,TreeNode *t2) {\n\n        if(t1==NULL && t2==NULL){\n            return NULL;\n        }\n        else{\n            if(t1==NULL){\n                t1 = t2;\n            }\n            else if(t1 !=NULL && t2 !=NULL){\n                t1->val = t1->val + t2->val;\n                t1->left = mergeTrees(t1->left,t2->left);\n                t1->right = mergeTrees(t1->right,t2->right);\n            }\n            return t1;\n            }\n        }\n\n};\n\n\n\n\n\n\nReverse words in a String\n\nLearned about input stringstream have to check soem more regarding stringstream operation.\nclass Solution {\npublic:\n    string reverseWords(string s) {\n        std::istringstream tmp(s);\n        std::stringstream ss;\n        std::vector<std::string> collection((std::istream_iterator<std::string>(tmp)),std::istream_iterator<std::string>());\n        for (std::vector<std::string>::iterator it=collection.begin();it!=collection.end();it++){\n            std::reverse((*it).begin(),(*it).end());\n            ss << *it << \" \";  \n        }\n    std::string result = ss.str();\n    result.pop_back();\n    return result;\n    }\n};\n\n\n\n\nEncode and Decode TinyURL\n\nLearned about find operation in unordered::map container it returns an const_iterator which points to the given key. If the map doesn't have the key then it will return map.end().\nclass Solution {\npublic:\n    std::unordered_map<std::string,std::string> urlencodebuck;\n    std::unordered_map<std::string,std::string> urldecodebuck;\n    std::string alphanum = \"abcdefghijklmnopqrstuvwxyz0123456789\";\n    std::unordered_map<std::string,std::string>::const_iterator check;\n\n    // Encodes a URL to a shortened URL.\n    string encode(string longUrl) {\n        check = urlencodebuck.find(longUrl);\n        if(check != urlencodebuck.end())\n            return urlencodebuck[longUrl];\n        else{\n            std::string shortUrl = \"\";\n            for(int i=0;i<6;i++){\n                shortUrl = shortUrl + alphanum[(rand() % 36)];\n            }\n            urlencodebuck[longUrl] = shortUrl;\n            urldecodebuck[shortUrl] = longUrl;\n            return urlencodebuck[longUrl];\n        }\n    }\n\n    // Decodes a shortened URL to its original URL.\n    string decode(string shortUrl) {\n        return urldecodebuck[shortUrl];\n    }\n};\n\n\n\n\nProject Euler\n\n\n Multiples of 3 & 5 below 1000 \n\nTime taken: 0.00006s\n#include <iostream>\n#include <time.h>\n\nint main(){\n    clock_t tStart = clock();\n    int multiple_3=0,multiple_5=0,multiple_15=0,i=0,sum=0;\n    while(multiple_5 <1000){\n        sum = sum + multiple_3 + multiple_5;\n        multiple_3 = multiple_3 + 3;\n        multiple_5 = multiple_5 + 5;\n        // multiple_5 = Multiple5(multiple_5);\n    }\n\n    while(multiple_3<1000){\n        sum = sum + multiple_3;\n        multiple_3 = multiple_3 + 3;\n    }\n    while(multiple_15<1000){\n        sum = sum - multiple_15;\n        multiple_15 = multiple_15 + 15;\n    }\n    std::cout << sum << '\\n';\n    printf(\"Time taken: %.5fs\\n\", (double)(clock() - tStart)/CLOCKS_PER_SEC);\n    return 0;\n} \n\n\n\nMy submission\nTime taken: 0.00007s\n#include <iostream>\n#include <time.h>\n\n\nint Multiple5(int multiple_5){\n    if (multiple_5%3==0){\n        multiple_5 = multiple_5 + 5;\n        Multiple5(multiple_5);\n    }\n    else\n        return multiple_5;\n\n}\n\nint main(){\n    clock_t tStart = clock();\n    int multiple_3=0,multiple_5=0,multiple_15=0,i=0,sum=0;\n    while(multiple_5 <1000){\n        sum = sum + multiple_3 + multiple_5;\n        multiple_3 = multiple_3 + 3;\n        multiple_5 = multiple_5 + 5;\n        multiple_5 = Multiple5(multiple_5);\n    }\n\n    while(multiple_3<1000){\n        sum = sum + multiple_3;\n        multiple_3 = multiple_3 + 3;\n    }\n\n    std::cout << sum << '\\n';\n    printf(\"Time taken: %.5fs\\n\", (double)(clock() - tStart)/CLOCKS_PER_SEC);\n    return 0;\n}",
      "tags": "Practice,Programming",
      "url": "https://thestrawh8.netlify.com/posts/programming_practice.html"
    },
    {
      "title": "Computer Vision Collection",
      "text": "CS131@Stanford\nCS231@Stanford\nCS231a@Stanford\nCV@Brown\nCV@Gatech\nCS543@UIUC\nCS280@Berkely\nCV@NYU\nCV@Cornell\nCS231b@Stanford",
      "tags": "Computer Vision",
      "url": "https://thestrawh8.netlify.com/posts/computer_vision_collection.html"
    },
    {
      "title": "Prioritized Links Collection",
      "text": "function rc4(key, str) {\n    var s = [], j = 0, x, res = '';\n    for (var i = 0; i < 256; i++) {\n        s[i] = i;\n    }\n    for (i = 0; i < 256; i++) {\n        j = (j + s[i] + key.charCodeAt(i % key.length)) % 256;\n        x = s[i];\n        s[i] = s[j];\n        s[j] = x;\n    }\n    i = 0;\n    j = 0;\n    for (var y = 0; y < str.length; y++) {\n        i = (i + 1) % 256;\n        j = (j + s[i]) % 256;\n        x = s[i];\n        s[i] = s[j];\n        s[j] = x;\n        res += String.fromCharCode(str.charCodeAt(y)  s[(s[i] + s[j]) % 256]);\n    }\n    return res;\n}\nfunction decrypt() {\n    key = $(\"#key\").val();\n    crypt_div = $(\"#encr\")\n    crypted = crypt_div.html();\n    decrypted = rc4(key, window.atob(crypted));\n    if (decrypted.substr(decrypted.length - 11) == \"<!--tail-->\"){\n        crypt_div.html(decrypted);\n        $(\"#pwform\").hide();\n        crypt_div.show();\n    } else { alert(\"Wrong password\"); };\n}\n\n\nf7ejQ1rJqb4nHfdvahqles8rLLaPG+uwvFKvBevLVyrVQSiOfL5bSMATmwiXTxEHMtBhqs/7wS/hJokiQZTM1k+MRxkeFoCHCrG8eJaxb0zqIYIBsolr6mB+3L1zb08qT2Q4adwggPyDFyw821ZAmviK22yLbYFKBb2DNkL67VSILVXh5Q6glMKZhjTS9S8uwRDv3+5JvR9Z1lpJIRtWHJrOsC0VSjyTmD4674SKbrfxXBFH0KKsgK2Obm8MqgUOe+IdGpxCgxaGDjFEk/3W1Ng3wP3/0ttZfFozAlHhTPMimC6COx6F3E/B0OECJ4yk6zCXepumeCPDHtUA+QZFvsHbRxNFaqSXcqYphi4qRhPKwSxGJUEBI7bupRojCMKdZ/FhEtQsw9JxgnwPyJqwttOHm9pqUv9hikpujJRJc0HxsD2nVrBItdFDp4zLPJ3si9g5vMHcxKrc2tVTqWkTW0gW/8k/qp5BZm9+ztH3a3WN09YUC4nfeklXmL7Mp2puzmI2JycYvQmPZDh4j7rrjzthiitLmK90b5XT5k4UBEWQoi2UWQwEpYH8/mse1ftUN2loMGxuqM0BoKvS70FbNR9RnheXs2xcFvsKNToRNbvp+tAxI4vMXskcQGQPa5AymnVmC7uyG3aQypGT6+zoFeGXtE9NeeO5DWoXgqP1houougNc8gB6GynPcSB0fHj2JC5w0GHv4vzV315av66IH/lhgI6HuWfXGn6g1Zje1DyP5mt7JfcUVGOGZ4T+PZgg4MRZssn7pfjXaR2iKFoWesq2Sgv1JQh/gu36zmbn9fRTdMvkERwXY2Zu5k8y9cEEItztpN4=\n\n\n\nThis post is password-protected.\n\n\nShow Content",
      "tags": "Bandits,Reinforcement Learning",
      "url": "https://thestrawh8.netlify.com/posts/prioritized-links-collection.html"
    },
    {
      "title": "Collection of Doubts",
      "text": "Pointer operation on a struct in C++ (How are the memory chunks assigned to the struct variable).\nWorking and Applications of Minimum Spanning Tree.\nWhy is Clique an NP Problem ?\nWhy is the atmost number of comparisons required for both minimum and maximum is 3n/2\nWhy does the worst case running time of heapify occur when the bottom lead nodes in a heap are only hald filled ? \nWhat is Chernoff Bound? \nGo Through Linear Discriminant Analysis",
      "tags": "Doubts",
      "url": "https://thestrawh8.netlify.com/posts/doubts_collection.html"
    },
    {
      "title": "Learning Theory Collection",
      "text": "Edgar Simo-Serra's Collection\nJoan Bruana's Statistical Approach of CNN's\nJoan Bruana's Foundations for Inference Approach\nMIT's Algos for Inference Course\nDavid Barber & Michael Jordan's Books\nAlgorithms in Reinforcmeent Learning by Csaba Szepesvari\n1st best Collection of Deep Learning Papers in Github\n2nd best Collection of Deep Learning Papers in Github\nPaper Spray\nUCL's Collection\nStatistical ML course\nDavid Silver's RL\n\nUMass'Amherst's CRF\nMarkov Random Fields in Segemntation ppt\n\nMachine Learning, Probablistic Models & NLP\n\nML@IISC\nML@CMU\nCS229@Stanford\nCV@Toronto\nCS228@Stanford\nCS224n@Stanford\nGraphical Models@Toronto\nDan Roy@Toronto\nIntro to ML@Berkely\nIntro to NLP@Cornell\nRaquel Urtasun's Course@Toronto\nSebastian Raschka's Collection",
      "tags": "Learning Thoery,Resources",
      "url": "https://thestrawh8.netlify.com/posts/learningtheory_collection.html"
    },
    {
      "title": "List of Conferences in Target",
      "text": "function rc4(key, str) {\n    var s = [], j = 0, x, res = '';\n    for (var i = 0; i < 256; i++) {\n        s[i] = i;\n    }\n    for (i = 0; i < 256; i++) {\n        j = (j + s[i] + key.charCodeAt(i % key.length)) % 256;\n        x = s[i];\n        s[i] = s[j];\n        s[j] = x;\n    }\n    i = 0;\n    j = 0;\n    for (var y = 0; y < str.length; y++) {\n        i = (i + 1) % 256;\n        j = (j + s[i]) % 256;\n        x = s[i];\n        s[i] = s[j];\n        s[j] = x;\n        res += String.fromCharCode(str.charCodeAt(y)  s[(s[i] + s[j]) % 256]);\n    }\n    return res;\n}\nfunction decrypt() {\n    key = $(\"#key\").val();\n    crypt_div = $(\"#encr\")\n    crypted = crypt_div.html();\n    decrypted = rc4(key, window.atob(crypted));\n    if (decrypted.substr(decrypted.length - 11) == \"<!--tail-->\"){\n        crypt_div.html(decrypted);\n        $(\"#pwform\").hide();\n        crypt_div.show();\n    } else { alert(\"Wrong password\"); };\n}\n\n\n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\n\n\n\nThis post is password-protected.\n\n\nShow Content",
      "tags": "Conferences",
      "url": "https://thestrawh8.netlify.com/posts/conferences_list.html"
    },
    {
      "title": "Being Vasly Ivanchuk",
      "text": "Chess Updates are yet to come",
      "tags": "",
      "url": "https://thestrawh8.netlify.com/stories/chess.html"
    },
    {
      "title": "Projections of the manifold named life onto the philosophy plane.",
      "text": "Mingyur Rinpoche\n\nLet it flow don't obstruct your thought process if it's bad slowly it will diminish when you show no more interest in it.\nMurmur with your dancing Neurons inside your Monkey Mind.\nPain, Anxiety & Fear only after you start accepting them, they will take control over you. Just let it go.\nMeditate anytime,anywhere.\nBe Aware\n\nTyler Durden\n\nNo fear,No districations the ability to let the doesn't matter truly slide.\nOnly when you are free from everything then you are free to do anything.\nNever give up on anything you dreamnt about, is it is easy then what kind of memory will it make.\nLearn to do whatever you liked you don't have to impress anyone.\nYou have the ability to do whatever you want.\n\nRichard Feynman\n\nEnjoying the work you do you don't have to bound your views of a concept based on the constrains of others, be fresh and pure.\nIf you keep your focus on different names the bird has in diffrent languages instead of studying the bird you will end up doing something else.\nBe free and do anything which makes an actual sense to your mind.\n\nThese are the three shades which I have. I would like to balance these states of mine which are different and all together build me up. I will be Aware, Pure, Fresh (Mingyur Rinpoche) & will be contain simultaneously the No fear, No distractions (Tyler Durden) & will also contain the freshness,clarity, excitement, enthusiasm towards learning & mastering science(Richard Feynman).",
      "tags": "",
      "url": "https://thestrawh8.netlify.com/stories/dots.html"
    },
    {
      "title": "Welcome to the mysterious land of Anime & Music",
      "text": "My Soundclound Arena is yet to be opened",
      "tags": "",
      "url": "https://thestrawh8.netlify.com/stories/music.html"
    },
    {
      "title": "Projections of the manfiold from inspiring people point of view",
      "text": "Quotes are yet to be collected",
      "tags": "",
      "url": "https://thestrawh8.netlify.com/stories/quotes.html"
    },
    {
      "title": "Hacks Collection",
      "text": "Detailed explanation of Regular Expressions\nPassword Protected jekyll website\nC++ STL Resource\nTinyURL Reference\nHow to connect two Ubuntu systems in same network",
      "tags": "Hacks",
      "url": "https://thestrawh8.netlify.com/posts/hacks_collection.html"
    },
    {
      "title": "Collection of Readings",
      "text": "Books to Read\n\nRandoimized Algorithms by Rajeev Motwani.\nData Structures and Network algorithms by Tarjan.\nConvex Optimization by Stephen Boyd.\nReinforcement Learning by Csaba Szepesvari\nDeep Learning Book by \nApproximation Algorithms by V.Vazirani\nReinhard Diestel's Graph Theory\nThe Probablistic Graphical Models by Daphielene Koller.\nDiestel's Graph Theory\nDouglous B west's Graph Theory\nJ.A.Bondy & U.S.R Murthy\n\n\nBooks Completed Reading\n\nAlgorithms by C.Papdimitrou ,U.Vazirani - (Pending Material from 8th Chapter) \nIntroduction to Algorithms by CLRS - ( DEletion in RB-Trees, Van Boe Trees, Amortized Analysis, Graphs and Graph Algorithms, Multi thread Algorithms, Geometric Algorithms, String Matching Algorithms to be covered). \n\nMaterials to be covered when Bored\n\nAlgorithms in Reinforcement Learning\nDeep Learning book - Ian Good Fellow, Yoshua Bengio\nAnkur Moitra's Course\nCS224@Harvard\nArora's Course\nCS139@Caltech\nCS168@Stanford\nAdvanced Algos@CMU\nAdvanced Algos@MIT\nErik Demaine's Course\n\nPending Topics\n\nStatML by Joan Bruana - [12.3.2 - End of 12th - Elements of statistical learning Book]\nCLRS- 13.4,14,15.5,16.4,16.5,17,18.3,19,20,21,22,23,24,25,26,27,28,29,32,33,34,35\nOpen Data Structures C++ \n\nInteresting Math Links Collections\n\nGroup Theory in Physics\n[Peter Woit's Blog]http://www.math.columbia.edu/~woit/wordpress/?p=8450\nDifferential Geometry@Stanford\nRandom Mathematical Discussions\nJohn Baez's Stuff\nTom Davis's Site\nMathematical Problems Collection\nMath Forum",
      "tags": "Algorithms,Graph Thoery,Mathematics",
      "url": "https://thestrawh8.netlify.com/posts/mathematics_collection.html"
    },
    {
      "title": "Programming Problems Collection",
      "text": "Complete all the problems under Algorithms Module in Leet Code.\nComplete working on different kinds of problems in SPOJ\nPractice and Compete in Codeforces and Topcoder.\nCommonlounge",
      "tags": "Practice,Programming",
      "url": "https://thestrawh8.netlify.com/posts/programming_collection.html"
    },
    {
      "title": "Deep Learning Setup",
      "text": "Installation of Deep Learning Setup ( Hybrid Graphics / Optimus Systems) => Ubuntu 16.04 + Nvidia(Driver+CUDA) + OpenCV3.2 + Caffe with specifications => GTX1070-Nvidia + i7-7700K ( Kabylake)\nAfter fresh installation of Ubuntu 16.04 \"Disabling nouveau driver\"\nsudo apt-get update\nsudo apt-get upgrade\n\n\n\nInstall one editor which you like the most\nsudo apt-get install vim\n\n\n\nBefore installing Drivers into your Hybrid system first we need to disable the nouveau (default display driver comes with linux) because it comes above all. Press 'CTRL+Alt+F1' you will enter shell now enter your username and password credentials and then continue\nsudo vim /etc/modprobe.d/blacklist.conf\n\n\n\nNow add the following lines in the end of the file ( Save & Exit)\nblacklist nouveau\nblacklist lbm-nouveau\noptions nouveau modeset=0\nalias nouveau off\nalias lbm-nouveau off\n\n\n\nNow get back to terminal and enter the following and later update the kernel and reboot\necho options nouveau modeset=0 | sudo tee -a /etc/modprobe.d/nouveau-kms.conf\nsudo update-initramfs -u\nsudo reboot\n\n\n\n\n\nIntel+Nvidia GPU working setup using bumblebee and primus\nBasically using primus we can switch between the graphics and we take the help of bumblebee to make it smooth and we also take the help of a GUI indicator to make the transistions more simple.\nAdd the following repositories\nsudo apt-add-repository ppa:graphics-drivers\nsudo apt-add-repository ppa:bumblebee/testing\nsudo apt-add-repository ppa:nilarimogard/webupd8\nsudo apt-get update\n\n\n\nGo to Settings >> Software & Updates >> Additional Drivers\nSelect Nvidia-378 driver (because it is stable and it worked for me) and click on Apply and then Restart the system.\nAfter Restarting you can see the Nvidia-driver being selected as the display driver which previously was Xorg's nouveau.For further conforamtion you can check with the following command and the output will be comething like this.\nnvidia-smi\n\n[root@localhost release]# nvidia-smi\nWed Sep 26 23:16:16 2012       \n+------------------------------------------------------+                       \n| NVIDIA-SMI 3.295.41   Driver Version: 295.41         |                       \n|-------------------------------+----------------------+----------------------+\n| Nb.  Name                     | Bus Id        Disp.  | Volatile ECC SB / DB |\n| Fan   Temp   Power Usage /Cap | Memory Usage         | GPU Util. Compute M. |\n|===============================+======================+======================|\n| 0.  Tesla C2050               | 0000:05:00.0  On     |         0          0 |\n|  30%   62 C  P0    N/A /  N/A |   3%   70MB / 2687MB |   44%     Default    |\n|-------------------------------+----------------------+----------------------|\n| Compute processes:                                               GPU Memory |\n|  GPU  PID     Process name                                       Usage      |\n|=============================================================================|\n|  0.  7336     ./align                                                 61MB  |\n+-----------------------------------------------------------------------------+\n\n\n\nNow either use command line or Synaptics Manager to install the requirements inorder to keep it simple I shall use Synaptic Manager to demonstrate\n1) Enter bumblebee in the search dialog then you will be able to see bumblebee, bumblebee-nvidia, primus select all the three and Mark up for Installation and then click Apply\n2) After installing above three we check for bbswitch-dkms in search dialog box.It can be seen as already installed ( if not then install it)\nWe get back to our terminal and take the help of prime to select Intel Graphics as primary\nsudo prime-select intel\nsudo reboot\n\n\n\nNow enter prime-indicator(/plus) in search and mark up for installation and restart your system.\nInorder to make the bumblebee and bbswitch to take care of your system and use latest nvidia driver which has been installed go to the following file and edit\nsudo vim /etc/bumblebee/bumblebee.conf\n\n\n\nNow update the following contents\nDriver= should be changed to\nDriver=nvidia\n\n\n\nIn [driver-nvidia] section replace all nvidia-current terms to nvidia-378(If you have installed 378 or else replace it with the driver number which has been installed) and also in the same section replace\nPMMethod=auto\nPMMethod=bbswitch\n\n\n\nNow restart\nsudo reboot\n\n\n\nWe are done with our Nvidia driver installation and we also can switch between Intel and Nvidia Graphics which will help with saving the battery\nInstallation of CUDA-8.0 and verifying if it works or not\nNow switch to Nvidia Graphics and download the run file. In my case I have downloaded cuda_8.0.61_375.26_linux.run file because previous ones need a below 4.9 gcc compiler but when it comes to 16.04 by defualt it installs gcc-5.0 and the installation of Caffe requires a gcc-5 compiler to work ( portbuf). After downloading go to the specific folder and then\nchmod 755 cuda_8.0.61_375.26_linux.run\nsudo ./cuda_8.0.61_375.26_linux.run\n\n\n\nEnter no when asked to install Nvidia driver and rest all can be entered as Yes.\nDon't worry if it shows something like this\n===========\n\n= Summary =\n\n===========\n\nDriver: Not Selected\n\nToolkit: Installed in /usr/local/cuda-8.0\n\nSamples: Installed in /home/username, but missing recommended libraries\n\nPlease make sure that\n\n- PATH includes /usr/local/cuda-8.0/bin\n\n- LD_LIBRARY_PATH includes /usr/local/cuda-8.0/lib64, or, add /usr/local/cuda-8.0/lib64 to /etc/ld.so.conf and run ldconfig as root\n\nTo uninstall the CUDA Toolkit, run the uninstall script in /usr/local/cuda-8.0/bin\n\nPlease see CUDA_Installation_Guide_Linux.pdf in /usr/local/cuda-8.0/doc/pdf for detailed information on setting up CUDA.\n\n***WARNING: Incomplete installation! This installation did not install the CUDA Driver. A driver of version at least 361.00 is required for CUDA 8.0 functionality to work.\n\n\n\nNow (Optional not required)\nsudo modprobe nvidia\n\n\n\nsudo vim /etc/profile\n\nand enter in the end\n\nexport PATH=/usr/local/cuda-8.0/bin:$PATH  \nexport LD_LIBRARY_PATH=/usr/local/cuda-8.0/lib64:$LD_LIBRARY_PATH\n\n\n\nNow save & exit\nsudo ldconfig\n\n\n\nThe setup is complete for CUDA now it's time to verify this\nsudo apt-get install freeglut3-dev build-essential libx11-dev libxmu-dev libxi-dev  libglu1-mesa libglu1-mesa-dev libgl1-mesa-glx  \n\n\n\nNow go to the location where samples folder is installed by default it is installed at ~/\ncd into the samples directory\ncd 1_Utilities/deviceQuery\nsudo make\nsudo ./deviceQuery\n\n\n\nit should show something like this\nDevice 0: Quadro M1000M\n  CUDA Driver Version / Runtime Version          8.0 / 7.5\n  CUDA Capability Major/Minor version number:    5.0\n  Total amount of global memory:                 2002 MBytes (2099642368 bytes)\n  ( 4) Multiprocessors, (128) CUDA Cores/MP:     512 CUDA Cores\n  GPU Max Clock rate:                            1072 MHz (1.07 GHz)\n  Memory Clock rate:                             2505 Mhz\n  Memory Bus Width:                              128-bit\n  L2 Cache Size:                                 2097152 bytes\n  Maximum Texture Dimension Size (x,y,z)         1D=(65536), 2D=(65536, 65536), 3D=(4096, 4096, 4096)\n  Maximum Layered 1D Texture Size, (num) layers  1D=(16384), 2048 layers\n  Maximum Layered 2D Texture Size, (num) layers  2D=(16384, 16384), 2048 layers\n  Total amount of constant memory:               65536 bytes\n  Total amount of shared memory per block:       49152 bytes\n  Total number of registers available per block: 65536\n  Warp size:                                     32\n  Maximum number of threads per multiprocessor:  2048\n  Maximum number of threads per block:           1024\n  Max dimension size of a thread block (x,y,z): (1024, 1024, 64)\n  Max dimension size of a grid size    (x,y,z): (2147483647, 65535, 65535)\n  Maximum memory pitch:                          2147483647 bytes\n  Texture alignment:                             512 bytes\n  Concurrent copy and kernel execution:          Yes with 1 copy engine(s)\n  Run time limit on kernels:                     No\n  Integrated GPU sharing Host Memory:            No\n  Support host page-locked memory mapping:       Yes\n  Alignment requirement for Surfaces:            Yes\n  Device has ECC support:                        Disabled\n  Device supports Unified Addressing (UVA):      Yes\n  Device PCI Domain ID / Bus ID / location ID:   0 / 1 / 0\n  Compute Mode:\n     < Default (multiple host threads can use with device simultaneously) >\n\ndeviceQuery, CUDA Driver = CUDART, CUDA Driver Version = 8.0, CUDA Runtime Version = 7.5, NumDevs = 1, Device0 = Quadro M1000M\nResult = PASS\n\n\n\nSimilarly we conduct the bandwidth test which will also show PASS something similar to above  and then we confirm its installation. If it shows fail then there is some error in CUDA installation.\ncd ..\ncd bandwidthTest\nsudo make\nsudo ./bandwidthTest\n\n\n\nWith this we are ready with our system to use CUDA and NVIDIA GPU.\nInstallation of CUDNN (Easiest of All I should say)\nGo to Nvidia's site and download cuDNN ( I myself used cuDNN 5.1) you will get almost 98MB file now extract the contents and go to the extracted folder\ncd /cuda\nsudo cp -P include/cudnn.h /usr/include\nsudo cp -P lib64/libcudnn* /usr/lib/x86_64-linux-gnu/\nsudo chmod a+r /usr/lib/x86_64-linux-gnu/libcudnn*\n\n\n\nInstalling OpenCV3.2 (may not be complete but is enough for working with caffe)\nIn Ubuntu 16.04, install the dependencies first and then build the OpenCV 3.2 from source.\nsudo apt-get install --assume-yes build-essential cmake git\nsudo apt-get install --assume-yes pkg-config unzip ffmpeg qtbase5-dev python-dev python3-dev python-numpy python3-numpy\nsudo apt-get install --assume-yes libopencv-dev libgtk-3-dev libdc1394-22 libdc1394-22-dev libjpeg-dev libpng12-dev libtiff5-dev libjasper-dev\nsudo apt-get install --assume-yes libavcodec-dev libavformat-dev libswscale-dev libxine2-dev libgstreamer0.10-dev libgstreamer-plugins-base0.10-dev\nsudo apt-get install --assume-yes libv4l-dev libtbb-dev libfaac-dev libmp3lame-dev libopencore-amrnb-dev libopencore-amrwb-dev libtheora-dev\nsudo apt-get install --assume-yes libvorbis-dev libxvidcore-dev v4l-utils python-vtk\nsudo apt-get install --assume-yes liblapacke-dev libopenblas-dev checkinstall\nsudo apt-get install --assume-yes libgdal-dev\n\n\n\nDownload the latest source archive for OpenCV 3.2 from https://github.com/opencv/opencv/archive/3.2.0.zip\nEnter the unpacked directory. Execute\nmkdir build\ncd build/    \ncmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D FORCE_VTK=ON -D WITH_TBB=ON -D WITH_V4L=ON -D WITH_QT=ON -D WITH_OPENGL=ON -D WITH_CUBLAS=ON -D CUDA_NVCC_FLAGS=\"-D_FORCE_INLINES\" -D WITH_GDAL=ON -D WITH_XINE=ON -D BUILD_EXAMPLES=ON ..\nmake -j $(($(nproc) + 1))\n\n\n\nTo complete the installation execute the following\nsudo make install\nsudo /bin/bash -c 'echo \"/usr/local/lib\" > /etc/ld.so.conf.d/opencv.conf'\nsudo ldconfig\nsudo apt-get update\n\n\n\nVerify installation with\npython\n>>> import cv2\n\n\n\nif it doesn't work then there is some error with OpenCV3.2 installation\nWith this we are done with our OpenCV3 installation next we jump into Caffe installation\nInstalling Caffe in 16.04 along with support of OpenCV3 & GPU (CUDA+cuDNN)\nFor pre-requisites we execute the following lines\nsudo apt-get update\nsudo apt-get upgrade\n\nsudo apt-get install -y build-essential cmake git pkg-config\nsudo apt-get install -y libprotobuf-dev libleveldb-dev libsnappy-dev libhdf5-serial-dev protobuf-compiler\nsudo apt-get install -y libatlas-base-dev\nsudo apt-get install -y --no-install-recommends libboost-all-dev\nsudo apt-get install -y libgflags-dev libgoogle-glog-dev liblmdb-dev\n\n# (Python general)\nsudo apt-get install -y python-pip\n\n# (Python 2.7 development files)\nsudo apt-get install -y python-dev\nsudo apt-get install -y python-numpy python-scipy\n\n\n\nWe next clone the Caffe repo.\ncd ~\ngit clone https://github.com/BVLC/caffe.git\n\n\n\nWe make changes in Makefile.config and Makefile and configure to proceed the Caffe installation smoothly.\ncd ~/caffe\ncp Makefile.config.example Makefile.config\nsudo vim Makefile.config\n\n\n\nWe now make the following changes and configure the copied Makefile.config (by uncommenting and editing the following lines in the file)\nUSE_CUDNN := 1\nOPENCV_VERSION := 3\n\nChange\nCUDA_DIR := /usr/local/cuda\nto\nCUDA_DIR := /usr/local/cuda-8.0\n\nPYTHON_INCLUDE := /usr/include/python2.7 /usr/lib/python2.7/dist-packages/numpy/core/include\nWITH_PYTHON_LAYER := 1\nINCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/local/include /usr/include/hdf5/serial\nLIBRARY_DIRS := $(PYTHON_LIB) /usr/local/lib /usr/lib /usr/lib/x86_64-linux-gnu /usr/lib/x86_64-linux-gnu/hdf5/serial\n\n\n\nSomtimes the PYTHON_INCLUDE may differ in some systems check for the presence of numpy core files\nPYTHON_INCLUDE := /usr/include/python2.7 /usr/local/lib/python2.7/dist-packages/numpy/core/include  \nWITH_PYTHON_LAYER := 1  \nINCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/local/include /usr/include/hdf5/serial  \nLIBRARY_DIRS := $(PYTHON_LIB) /usr/local/lib /usr/lib /usr/lib/x86_64-linux-gnu /usr/lib/x86_64-linux-gnu/hdf5/serial\n\n\n\nNow edit Makefile ( above we edited Makefile.config)\ncd ~/caffe\nsudo vim Makefile\n\nChange\nNVCCFLAGS += -ccbin=$(CXX) -Xcompiler -fPIC $(COMMON_FLAGS)\nto\nNVCCFLAGS += -D_FORCE_INLINES -ccbin=$(CXX) -Xcompiler -fPIC $(COMMON_FLAGS)\n\n\n\nNow we install some python requirements by taking pip's help\ncd ~/caffe/python\nfor req in $(cat requirements.txt); do sudo -H pip install $req --upgrade; done\n\n\n\nNow it's time to check make and check caffe's installation\ncd ~/caffe\nmake all -j $(($(nproc) + 1))\nmake test\nmake runtest\n\nmake pycaffe\nmake distribute\n\nsudo vim ~/.bashrc\nadd the follwing line to the file\nexport PYTHONPATH=~/caffe/python:$PYTHONPATH\nsource ~/.bashrc\n\n\n\nNow you can verify your installation with (for python2.7)\npython\n>>> import caffe\n\n\n\nWith this we are ready with are our Deep Learning setup it's now time to become the Pirate King!",
      "tags": "Caffe,Graphics-drivers,Learning Thoery",
      "url": "https://thestrawh8.netlify.com/posts/deeplearning_setup.html"
    },
    {
      "title": "Audio Drivers Installion",
      "text": "It has been that there is a requirement of 4.11 kernel version for Realtek-ALC1220 to support. So if you too built a your new PC like me then it might be helpful to you for temporary replacement. Uninstall your alsa-base and reinstall latest version it will work fine.\nsudo apt-get remove alsa-base\n\n\n\nNow go to http://www.stchman.com/tools/alsa/alsa_setup.sh and download the script and then do\nsudo ./alsa_setup.sh\n\n\n\nThis will reinstall the lastest driver in your system and reboots it.\n Precautions if you are having Hybrid Graphics(Intel + Nvidia) then it is suggested to run on Intel HD Graphics and then install. Because this driver is supported for Intel HDA versions if you try to install when you are running in NVIDIA this might cause several failures.",
      "tags": "Audio driver",
      "url": "https://thestrawh8.netlify.com/posts/audiodrivers_installation.html"
    },
    {
      "title": "Contact",
      "text": "I would like to use this as a platform to be thankful for the whole community who help others by sharing their knowledge and thoughts openly and help amateurs like us to grow. I would also start my journey of learning by sharing my knowledge and views. I will be very happy to discuss with everyone either Academic or Non-Academic details.\n  \n  \n\n  \n    \n      \n        \n          Please do share your Feedback   \n        \n          Name\n          \n          You really do have a nice name.\n            \n        \n          Email address\n          \n          Will never share your email with anyone else.\n        \n        \n          Share your Feedback\n          \n          Thanks for sharing your thoughts with me.\n        \n        Submit\n  \n  \n  \n  \n\n\n  \n    \n      Contact details\n      \n        \n          Monkey D Luffy \n          thestrawh8@gmail.com \n          3rd Floor, \n          SBI Building, \n          Rajendra Nagar, \n          Gudivada, \n        Andhra Pradesh.",
      "tags": "",
      "url": "https://thestrawh8.netlify.com/stories/contact.html"
    },
    {
      "title": "Academic",
      "text": "Interests & Skills\n\t\t\t  Education\n\t\t\t  Employment\n\t\t\t\n\t\t\t\n\t\t\t\t\n\t\t\t\n\t\t\t  \n\t\t\t\t  Interests\n\t\t\t\t  Deep Learning, Variational Methods, Kernel Methods, Optimization Mathods, 3D Facial Reconstruction, Multi view Stereo, Statistical Modelling methods, Bayesian Methods, Probablitic Graphical Models, Manifold methods in Machine Learning,Deep Reinforcement Learning, Multi arm Bandits, Semantic Segmentation, Pose Estimation, Statistical Signal Processing, Group theoritic & Differential geometric projections on Machine Learning, Scalability, Advanced Algorithms & Data Structures, Competitive-Programming, Chess, One-Piece Anime, Music & Blogging.\n\t\t\t\t \n\t\t\t\t  Skills\n\t\t\t\t  \n\t\t\t\t\tPlatforms: Ubuntu, CentOS, Windows. \n\t\t\t\t\tProgramming Languages: Python, C++, MATLAB, Java, Javascript, SQL, HTML, C, DWR, Struts, Bootstrap-CSS.\n\t\t\t\t\tLibraries Familiar: Menpo, Caffe, TensorFlow, PyTorch, OpenCV, OpenMVS, COLMAP, Numpy, Scikit-Learn, Matcaffe, Nikola etc.\n\t\t\t\t\n\t\t\t\t  \n\t\t\t  \n\t\t\t\t\n\t\t\t\n\t\t\t  \n\t\t\t\t\n\t\t\t\t\tBachelors of Technology in Instrumentation Engineering, 2012-2016:\n\t\t\t\t\t\t\n\t\t\t\t\t\tIndian Institute of Technology Kharagpur, India\n\t\t\t\t\t\t\tHonours Thesis: Variational Bayesian Matrix Factorization of Bounded Support Data\n\t\t\t\t\t\t\tResearch Projects\n\t\t\t\t\t\t\t\tVariational Bayesian Matrix Factorization of Bounded Support Data:\n\t\t\t\t\t\t\t\t\tGuide: Prof. Anirban M. (implementation of IEEE Transaction on Pattern Analysis and Machine Intelligence-2015.)\n\t\t\t\t\t\t\t\t\tCancer epigenomic analysis,Prediction of missing data in the images,Source-Seperation and Source-Reconstruction by BG-NMF technique.\n\t\t\t\t\t\t\t\tBaler Weights Variation in PBR Plant:\n\t\t\t\t\t\t\t\t\tDesigned a Prototype of low cost \"Feedback System\" for reduction of weight variation caused during the opening and closing of baler gates\n\t\t\t\t\t\t\t\tAnalysed Load cell architecture and operating, frequency ranges and recommended cost effective solutions which after implementation reduced the variation from 350gm to 150 gm exceeding the standard efficiency of Baler Corp.\n\t\t\t\t\t\t\t\tModelling the Transitions in Lung cancer cells and classification of different cells using Deep Belief Networks.:\n\t\t\t\t\t\t\t\t\tModelling different stages of epigenomic cells and classifying them into 4 different transition stages with an accuracy of 97.5% and 89.9% respectively for binary and multi-class problems.\n\t\t\t\t\t\t\t\tMeasurement of fiber angular orientation distributions of the objects in the images:\n\t\t\t\t\t\t\t\t\tUsing the fourier components for determining the orientation. Can be used to identify the alignment of objects with good accuracy.\n\t\t\t\t\t\t\t\tARMS-Robotic Arm Sleeves:\n\t\t\t\t\t\t\t\t\tInterfaced EMG sensors and IMU with a robotic arm using Xigbee protocol and Atmega 16 microcontroller for mimicing the human arm movements.(group project)\n\t\t\t\t\t\t\t\tExamination of various feature extraction and selection techniques for binary classification problem of Right half and Left half brain activity based on EEG signals.:\n\t\t\t\t\t\t\t\t\tGuide: Prof. Manjunatha M.\n\t\t\t\t\t\t\t\t\tPerforming Pre processing using STFT transformation and using alpha,beta,etc. components as features to classify.\n\t\t\t\t\t\t\t\tDesign and Construction of a low cost Digital PH-meter using constant phase element as sensor:\n\t\t\t\t\t\t\t\t\tGuide: Prof. Karabi B.\n\t\t\t\t\t\t\t\t\tDesigned and constructed a low cost PH-meter from scratch using Operational-Amplifiers and Logic gates(for conditioning the output of sensing element, PMMA, DQN-70 coated probes.\n\t\t\t\t\t\t\t\tAnalog circuit design for Measuring Heart Rate and Blood flow rate - Plethysmography:\n\t\t\t\t\t\t\t\t\tGuide: Prof. Saraswat C.\n\t\t\t\t\t\t\t\t\tDesigned and constructed circuitry for measuring the blood flow rate using plethysmography technique from basic Low-pass filters and Instrumentation Amplifiers.\n\t\t\t\t\t\t\t\tSanjeevani:\n\t\t\t\t\t\t\t\t\tGuide: Prof. Saraswat C.\n\t\t\t\t\t\t\t\t\tConceptualized and designed a prototype of a product which is made by bringing all kinds of card tests in one compact machine to detect conditions of diseases.(group project)\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t\tExtra-Activities:\n\t\t\t\t\t\t\tPart of Gold winning Ad-Design-(2013), Product-Design-(2014) teams of Nehru Hall of Residence\n\t\t\t\t\t\t\t\tKey member in conceptualizing the ideas for Product-Design-(2013), Hardware-Modelling-(2013) events of Nehru Hall of Residence.\n\t\t\t\t\t\t\t\tPart of Hockey and Chemical Innovation Teams of Nehru Hall of Residence.\n\t\t\t\t\t\t\n\t\t\t\t\t\t\tHonours and Achievements: \n\t\t\t\t\t\t\t\tAwarded for presenting an Idea on Detection of DDOS attacks using Deep Learning techniques by monitoring the Network Packet Flow at HPE - Aruba Networks.\n\t\t\t\t\t\t\t\t\tReceived an Excellence Award from the site president of Reliance Industries and was the only intern to get this award among 90 interns from various IIT\u2019s ans NIT\u2019s in that year.\n\t\t\t\t\t\t\t\t\tReceived a Pre-Placement Offer from Reliance Industries.\n\t\t\t\t\t\t\t\t\tSecured a rank in top 0.1,1% in AIEEE and JEE.\n\n\t\t\t\t\n\t\t\t\t\tIntermediate Examination Board of Andhra Pradesh, 2010-2012\n\t\t\t\t\t\tGPA: 9.43\n\t\t\t\t\n\t\t\t\t\tSecondary School Certificate Board of Andhra Pradesh, 2010\n\t\t\t\t\t\tGPA: 9.37\n\t\t\t  \n\t\t\t\t\n\t\t\t\n\t\t\t  \n\t\t\t\t\n\t\t\t\t\t\tSystem Software Engineer - II @Hewlett Packard Enterprise - Aruba R&D Sep 2016-Sep 2017\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tPart of 12/39 members of Core Development team of Aruba-Clearpass who work from India (Rest in U.S)\n\t\t\t\t\t\t\t\tGained experience on full technology Stack from UI to Hibernate DB for Aruba Clearpass Security Product.\n\t\t\t\t\t\t\t\tStarted work from automation of REST API\u2019s using Python and continued work on UI(Javascript) and Java Backend Operations and Hibernate DB. Made a good number of feature additions to the product as a part of upgrade -6.7 and actively participated to take decisions for product\u2019s security aspect future from AI point of view.\n\t\t\t\t\t\t\t\n\t\t\t\t\t\tSummer Internship - Baler Weight Variation in PBR @ Reliance-Industries May 2015-Jul 2015\n\t\t\t\t\t\t\tDesigned a Prototype of low cost \"Feedback System\" for reduction of weight variation caused during the opening and closing of baler gates\n\t\t\t\t\t\t\t\tAnalysed Load cell architecture and operating, frequency ranges and recommended cost effective solutions which after implementation reduced the variation from 350gm to 150 gm exceeding the standard efficiency of Baler Corp.",
      "tags": "",
      "url": "https://thestrawh8.netlify.com/stories/academic.html"
    }
  ]
}